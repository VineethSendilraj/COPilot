{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["file:///Users/vineethsendilraj/Documents/Code/COPilot%20STUFF/COPilot/dashboard/app/api/livekit-connection/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { AccessToken } from 'livekit-server-sdk';\n\n// You'll need to set these environment variables\nconst LIVEKIT_API_KEY = process.env.LIVEKIT_API_KEY || 'devkey';\nconst LIVEKIT_API_SECRET = process.env.LIVEKIT_API_SECRET || 'secret';\nconst LIVEKIT_URL = process.env.LIVEKIT_URL || 'ws://localhost:7880';\n\nexport interface ConnectionDetails {\n  serverUrl: string;\n  roomName: string;\n  participantToken: string;\n  participantName: string;\n}\n\nexport async function POST(req: Request) {\n  try {\n    const body = await req.json();\n    const { roomName = 'officer-stream-room', participantType = 'dashboard' } = body;\n\n    // Generate participant token for dashboard observer\n    const participantName = participantType === 'dashboard' ? 'dashboard-observer' : 'officer';\n    const participantIdentity = `${participantType}_${Math.floor(Math.random() * 10_000)}`;\n\n    const token = new AccessToken(LIVEKIT_API_KEY, LIVEKIT_API_SECRET, {\n      identity: participantIdentity,\n      name: participantName,\n    });\n\n    // Set permissions based on participant type\n    if (participantType === 'dashboard') {\n      // Dashboard is read-only observer\n      token.addGrant({\n        roomJoin: true,\n        room: roomName,\n        canPublish: false,\n        canSubscribe: true,\n        canPublishData: false,\n      });\n    } else {\n      // Officer can publish streams\n      token.addGrant({\n        roomJoin: true,\n        room: roomName,\n        canPublish: true,\n        canSubscribe: true,\n        canPublishData: true,\n      });\n    }\n\n    const jwt = await token.toJwt();\n\n    const connectionDetails: ConnectionDetails = {\n      serverUrl: LIVEKIT_URL,\n      roomName,\n      participantToken: jwt,\n      participantName,\n    };\n\n    return NextResponse.json(connectionDetails);\n  } catch (error) {\n    console.error('Error generating LiveKit connection details:', error);\n    return NextResponse.json(\n      { error: 'Failed to generate connection details' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;;;AAEA,iDAAiD;AACjD,MAAM,kBAAkB,QAAQ,GAAG,CAAC,eAAe,IAAI;AACvD,MAAM,qBAAqB,QAAQ,GAAG,CAAC,kBAAkB,IAAI;AAC7D,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW,IAAI;AASxC,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,WAAW,qBAAqB,EAAE,kBAAkB,WAAW,EAAE,GAAG;QAE5E,oDAAoD;QACpD,MAAM,kBAAkB,oBAAoB,cAAc,uBAAuB;QACjF,MAAM,sBAAsB,GAAG,gBAAgB,CAAC,EAAE,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,SAAS;QAEtF,MAAM,QAAQ,IAAI,gLAAW,CAAC,iBAAiB,oBAAoB;YACjE,UAAU;YACV,MAAM;QACR;QAEA,4CAA4C;QAC5C,IAAI,oBAAoB,aAAa;YACnC,kCAAkC;YAClC,MAAM,QAAQ,CAAC;gBACb,UAAU;gBACV,MAAM;gBACN,YAAY;gBACZ,cAAc;gBACd,gBAAgB;YAClB;QACF,OAAO;YACL,8BAA8B;YAC9B,MAAM,QAAQ,CAAC;gBACb,UAAU;gBACV,MAAM;gBACN,YAAY;gBACZ,cAAc;gBACd,gBAAgB;YAClB;QACF;QAEA,MAAM,MAAM,MAAM,MAAM,KAAK;QAE7B,MAAM,oBAAuC;YAC3C,WAAW;YACX;YACA,kBAAkB;YAClB;QACF;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gDAAgD;QAC9D,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwC,GACjD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}