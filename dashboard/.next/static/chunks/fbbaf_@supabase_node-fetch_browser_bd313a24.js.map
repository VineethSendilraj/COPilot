{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/vineethsendilraj/Documents/Code/COPilot%20STUFF/COPilot/dashboard/node_modules/%40supabase/realtime-js/node_modules/%40supabase/node-fetch/browser.js"],"sourcesContent":["\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar globalObject = getGlobal();\n\nmodule.exports = exports = globalObject.fetch;\n\n// Needed for TypeScript and Webpack.\nif (globalObject.fetch) {\n\texports.default = globalObject.fetch.bind(globalObject);\n}\n\nexports.Headers = globalObject.Headers;\nexports.Request = globalObject.Request;\nexports.Response = globalObject.Response;\n"],"names":[],"mappings":"AAEA,+CAA+C;AAC/C,IAAI,YAAY;IACf,sDAAsD;IACtD,8BAA8B;IAC9B,sDAAsD;IACtD,IAAI,OAAO,SAAS,aAAa;QAAE,OAAO;IAAM;IAChD,IAAI,OAAO,WAAW,aAAa;QAAE,OAAO;IAAQ;IACpD,wCAAmC;QAAE;IAAe;;;AAErD;AAEA,IAAI,eAAe;AAEnB,OAAO,OAAO,GAAG,UAAU,aAAa,KAAK;AAE7C,qCAAqC;AACrC,IAAI,aAAa,KAAK,EAAE;IACvB,QAAQ,OAAO,GAAG,aAAa,KAAK,CAAC,IAAI,CAAC;AAC3C;AAEA,QAAQ,OAAO,GAAG,aAAa,OAAO;AACtC,QAAQ,OAAO,GAAG,aAAa,OAAO;AACtC,QAAQ,QAAQ,GAAG,aAAa,QAAQ","ignoreList":[0],"debugId":null}}]
}